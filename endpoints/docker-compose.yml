# Versão da sintaxe do Docker Compose. '3.8' é uma boa versão recente.
version: '3.8'

# Define os serviços (contêineres) da sua aplicação
services:
  # Serviço para a sua API Spring Boot
  app:
    # Constrói a imagem Docker a partir do Dockerfile no diretório atual
    # Certifique-se de que o Dockerfile está na raiz do seu projeto
    build:
      context: . # O contexto do build é o diretório atual
      dockerfile: Dockerfile # O nome do seu Dockerfile
    
    # Mapeia portas do host para o contêiner
    # Esquerda: porta no seu computador local
    # Direita: porta que o contêiner expõe (definida no EXPOSE do Dockerfile, geralmente 8080)
    ports:
      - "8080:8080"
    
    # Monta um volume para o código-fonte
    # Isso permite que você faça alterações no código no seu host e veja as atualizações
    # no contêiner sem precisar reconstruir a imagem (útil com Spring Boot DevTools ou Hot Reload)
    # Cuidado: Para produção, é mais comum copiar o JAR, não montar o código-fonte.
    volumes:
      - .:/app # Monta o diretório atual do host para /app dentro do contêiner
      - /app/target # Evita que a pasta 'target' (com o JAR) no contêiner sobrescreva a do host
    
    # Define as variáveis de ambiente para a sua aplicação Spring Boot
    # Estas são as credenciais que sua API usará para se conectar ao PostgreSQL
    # Atenção: Mantenha esses valores apenas para AMBIENTE LOCAL de desenvolvimento.
    # Em produção, essas variáveis são gerenciadas pela sua plataforma de hospedagem (Render, K8s, etc.)
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/mydatabase # 'db' é o nome do serviço do PostgreSQL no Compose
      SPRING_DATASOURCE_USERNAME: myuser
      SPRING_DATASOURCE_PASSWORD: mysecretpassword
      SPRING_JPA_HIBERNATE_DDL_AUTO: update # Para desenvolvimento local, 'update' pode ser útil para auto-criação de tabelas.
      # Em produção, use 'none' ou 'validate'.
    
    # Garante que o serviço 'db' (PostgreSQL) esteja rodando antes de iniciar 'app'
    depends_on:
      - db
    
  # Serviço para o banco de dados PostgreSQL
  db:
    # Usa a imagem oficial do PostgreSQL do Docker Hub
    image: postgres:16-alpine # 16 é a versão, -alpine é uma imagem leve
    
    # Mapeia portas (opcional, útil para acessar o DB com ferramentas como DBeaver)
    - "5432:5432"
    
    # Define as variáveis de ambiente para o PostgreSQL
    # Essas variáveis configuram o superusuário e o banco de dados inicial
    environment:
      POSTGRES_DB: mydatabase
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mysecretpassword
    
    # Monta um volume para persistir os dados do banco de dados
    # Isso garante que seus dados não sejam perdidos se o contêiner do DB for removido
    volumes:
      - db_data:/var/lib/postgresql/data # Mapeia um volume nomeado para a pasta de dados do PostgreSQL

# Define os volumes nomeados usados pelos serviços
volumes:
  db_data: # Onde os dados do PostgreSQL serão armazenados de forma persistente