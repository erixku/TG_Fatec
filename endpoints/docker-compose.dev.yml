# Versão da sintaxe do Docker Compose. '3.8' é uma boa versão recente.
version: '3.8'

# Define os serviços (contêineres) da sua aplicação
services:
  # Serviço para a sua API Spring Boot
  app:
    # Constrói a imagem Docker a partir do Dockerfile no diretório atual
    # Certifique-se de que o Dockerfile está na raiz do seu projeto
    build:
      context: . # O contexto do build é o diretório atual
      dockerfile: Dockerfile.dev # O nome do seu Dockerfile
    
    # Mapeia portas do host para o contêiner
    # Esquerda: porta no seu computador local
    # Direita: porta que o contêiner expõe (definida no EXPOSE do Dockerfile, geralmente 8080)
    ports:
      - "8080:8080"
    
    # Monta um volume para o código-fonte
    # Isso permite que você faça alterações no código no seu host e veja as atualizações
    # no contêiner sem precisar reconstruir a imagem (útil com Spring Boot DevTools ou Hot Reload)
    # Cuidado: Para produção, é mais comum copiar o JAR, não montar o código-fonte.
    volumes:
      - .:/app # Monta o diretório atual do host para /app dentro do contêiner
      - /app/target # Evita que a pasta 'target' (com o JAR) no contêiner sobrescreva a do host
    
    # Define as variáveis de ambiente para a sua aplicação Spring Boot
    # Estas são as credenciais que sua API usará para se conectar ao PostgreSQL
    # Atenção: Mantenha esses valores apenas para AMBIENTE LOCAL de desenvolvimento.
    # Em produção, essas variáveis são gerenciadas pela sua plataforma de hospedagem (Render, K8s, etc.)
    env_file:
      - .env